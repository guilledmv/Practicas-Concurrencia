//package Practica1;
import org.jcsp.lang.Alternative;

import org.jcsp.lang.Any2OneChannel;
import org.jcsp.lang.CSProcess;
import org.jcsp.lang.ProcessManager;

import es.upm.aedlib.fifo.FIFO;
import es.upm.aedlib.fifo.FIFOList;

import org.jcsp.lang.Channel;
import org.jcsp.lang.Guard;
import org.jcsp.lang.One2OneChannel;

/**
 * Implementacion usando jcsp mediante peticiones aplazadas
 */

//Grupo: Guillermo De Miguel Villanueva (160262) , Marcos Arevalo Salas (160266)

public class EnclavamientoCSP implements CSProcess, Enclavamiento {

	// CANALES PARA RECIBIR EL ESTADO DEL RECURSO--> 1 CANAL POR METODO
	private final Any2OneChannel chAvisarPresencia     = Channel.any2one();
	private final Any2OneChannel chLeerCambioBarrera   = Channel.any2one();
	private final Any2OneChannel chLeerCambioFreno     = Channel.any2one();
	private final Any2OneChannel chLeerCambioSemaforo  = Channel.any2one();
	private final Any2OneChannel chAvisarPasoPorBaliza = Channel.any2one();  

	public EnclavamientoCSP() {
		new ProcessManager(this).start();
	}

	// CLASE AUXILIAR PARA LAS PETICIONES QUE VAMOS RECIBIENDO
	public static class PeticionLeerCambioBarrera{
		protected One2OneChannel channel;
		protected boolean value;

		public PeticionLeerCambioBarrera(One2OneChannel channel, boolean value) {
			this.channel = channel;
			this.value = value;
		}
	}

	public static class PeticionLeerCambioFreno{
		protected One2OneChannel channel;
		protected boolean value;

		public PeticionLeerCambioFreno(One2OneChannel channel, boolean value) {
			this.channel = channel;
			this.value = value;
		}
	}

	public static class PeticionLeerCambioSemaforo{
		protected One2OneChannel channel;
		protected Control.Color color;
		protected int index;

		public PeticionLeerCambioSemaforo(One2OneChannel channel,
				Control.Color color,
				int index) {
			this.channel = channel;
			this.color = color;
			this.index = index;
		}
	}

	// IMPLEMENTACION ENCLAVAMIENTO
	@Override
	public void avisarPresencia(boolean presencia) {
		chAvisarPresencia.out().write(presencia);
	}

	@Override
	public boolean leerCambioBarrera(boolean abierta) {
		One2OneChannel ch = Channel.one2one();
		chLeerCambioBarrera.out().write(new PeticionLeerCambioBarrera(ch, abierta));
		return (Boolean) ch.in().read();
	}

	@Override
	public boolean leerCambioFreno(boolean accionado) {
		One2OneChannel ch = Channel.one2one();
		chLeerCambioFreno.out().write(new PeticionLeerCambioFreno(ch, accionado));
		return (Boolean) ch.in().read();
	}

	/** notice that exceptions can be thrown outside the server */
	@Override
	public Control.Color leerCambioSemaforo(int i, Control.Color color) {
		if (i == 0 )
			throw new PreconditionFailedException("Semaforo 0 no existe");

		One2OneChannel ch = Channel.one2one();
		chLeerCambioSemaforo.out().write(new PeticionLeerCambioSemaforo(ch, color, i));
		return (Control.Color) ch.in().read();
	}

	@Override
	public void avisarPasoPorBaliza(int i) {
		if (i == 0 )
			throw new PreconditionFailedException("Baliza 0 no existe");
		
		chAvisarPasoPorBaliza.out().write(i);
	}


	// NOMBRES PARA LOS INDICES DE SERVICIOS
	static final int AVISAR_PRESENCIA = 0;
	static final int LEER_CAMBIO_BARRERA = 1;
	static final int LEER_CAMBIO_FRENO  = 2;
	static final int LEER_CAMBIO_SEMAFORO  = 3;
	static final int AVISAR_PASO_POR_BALIZA = 4;

	@Override
	public void run() {
		// VARIABLES GLOBALES PARA CONTROLAR EL ENCLAVAMIENTO

		boolean presencia; // DECLARAMOS EL ATRIBUTO PRESENCIA, PARA DETECTAR PRESENCIA EN EL CRUCE
		int [] trenes; 	// DECLARAMOS ARRAY DE TRENES PARA CONTROLAR EL PASO POR LAS BALIZAS
		Control.Color [] coloresBaliza; // DECLARAMOS UN ARRAY DE COLORES PARA LOS SEMAFOROS

		//DECLARAMOS ESTRUCTURAS AUXILIARES PARA ALMACENAR LAS PETICIONES APLAZADAS EN EL SERVIDOR

		FIFO<PeticionLeerCambioBarrera> listaBarrera; // DECLARAMOS TRES COLAS PARA ALMACENAR LAS PETICIONES DE BARRERA, FRENO Y SEMAFORO
		FIFO<PeticionLeerCambioFreno> listaFreno;
		FIFO<PeticionLeerCambioSemaforo> listaSemaforo;


		// INICIALIZAMOS EL ESTADO DE NUESTROS RECURSOS
		presencia = false;
		trenes = new int [] {0,0,0,0};
		coloresBaliza = new Control.Color [] {Control.Color.VERDE,Control.Color.VERDE,Control.Color.VERDE,Control.Color.VERDE};
		
		// INICIALIZAMOS NUESTRAS COLAS DE PETICIONES
		listaBarrera = new FIFOList<PeticionLeerCambioBarrera>();
		listaFreno = new FIFOList<PeticionLeerCambioFreno>();
		listaSemaforo = new FIFOList<PeticionLeerCambioSemaforo>();

		// CONSTRUIMOS RECEPCION ALTERNATIVA
		Guard[] inputs = {
				chAvisarPresencia.in(),
				chLeerCambioBarrera.in(),
				chLeerCambioFreno.in(),
				chLeerCambioSemaforo.in(),
				chAvisarPasoPorBaliza.in()
		};

		Alternative services = new Alternative(inputs);

		// BUCLE DE SERVICIO
		while (true){

			int chosenService = services.fairSelect();

			switch (chosenService) {

			case AVISAR_PRESENCIA:
				// LEEMOS PETICION DEL CANAL
				Boolean quePresencia = (Boolean) chAvisarPresencia.in().read();
				// ACTUALIZAMOS ESTADO DEL RECURSO
				presencia = quePresencia;
				break;

			case LEER_CAMBIO_BARRERA:
				// LEEMOS PETICION DEL CANAL
				chLeerCambioBarrera.in().read();
				// GUARDAR PETICION TAL CUAL
				listaBarrera.enqueue((PeticionLeerCambioBarrera) chLeerCambioBarrera.in().read());
				break;

			case LEER_CAMBIO_FRENO:
				// LEEMOS PETICION DEL CANAL
				chLeerCambioFreno.in().read();
				// GUARDO LA PETICION TAL CUAL
				listaFreno.enqueue((PeticionLeerCambioFreno) chLeerCambioFreno.in().read());
				break;

			case LEER_CAMBIO_SEMAFORO:
				// LEEMOS PETICION DEL CANAL
				chLeerCambioSemaforo.in().read();
				// GUARDO LA PETICION TAL CUAL
				listaSemaforo.enqueue((PeticionLeerCambioSemaforo) chLeerCambioSemaforo.in().read());
				break;

			case AVISAR_PASO_POR_BALIZA:
				// LEEMOS PETICION DEL CANAL
				Integer queBaliza = (Integer) chAvisarPasoPorBaliza.in().read();
				// ACTUALIZO EL ESTADO DEL RECURSO
				trenes[queBaliza-1] = trenes [queBaliza-1]-1;
				trenes[queBaliza] = trenes[queBaliza]+1;
				break;
			} // CIERRE swith
			
			// IMPLEMENTA LOS COLORES CORRECTOS
			if( trenes[1] > 0 ) {
				coloresBaliza[1] = Control.Color.ROJO; 
			} if( trenes[1] == 0 && ( trenes[2] > 0 || presencia == true )) {
				coloresBaliza[1] = Control.Color.AMARILLO; 	   
			} if( trenes[1] == 0 && trenes[2] == 0 && presencia == false ) {
				coloresBaliza[1] = Control.Color.VERDE; 
			} if( trenes[2] > 0 || presencia == true ) {
				coloresBaliza[2] = Control.Color.ROJO; 
			} if( trenes[2] == 0 && presencia == false ) {
				coloresBaliza[2] = Control.Color.VERDE; 
			} 
			coloresBaliza[3] = Control.Color.VERDE; 
			
			//BLOQUEO Y DESBLOQUEO DE LAS PETICIONES
			// TAMANO DE MIS COLAS DONDE ALMACENO LAS PETICIONES PENDIENTES
			
			int sizeBarrera = listaBarrera.size();
			int sizeFreno = listaFreno.size();
			int sizeSemaforo = listaSemaforo.size();
			
			// RECORRIDO DE LA COLA DE LAS PETICIONES DE BARRERA
			for (int i = 0; i < sizeBarrera; i++) {

				PeticionLeerCambioBarrera petBar = listaBarrera.first(); // OBTENEMOS PRIMER ELEMENTO DE LA COLA
				listaBarrera.dequeue(); // DESENCOLAMOS PRIMER ELEMENTO

				// SI SE CUMPLE LA CPRE DE BARRERA Y EXISTEN PETICIONES EN COLA --> SENALIZA
				if( petBar.value != (trenes[1] + trenes[2] == 0)) {
					petBar.channel.out().write(petBar.value);
					// SI NO SE CUMPLE LA CPRE DE BARRERA--> VUELVE A ENCOLAR EL ELEMENTO 
				} else {
					listaBarrera.enqueue(petBar);
				}
			} // CIERRE BUCLE COLA BARRERA
			// RECORRIDO DE LA COLA DE LAS PETICIONES DE FRENO
			for ( int j = 0 ; j < sizeFreno; j++) { 

				PeticionLeerCambioFreno petFren = listaFreno.first(); // OBTENEMOS PRIMER ELEMENTO DE LA COLA
				listaFreno.dequeue(); // DESENCOLAMOS PRIMER ELEMENTO

				// SI SE CUMPLE LA CPRE DE FRENO Y EXISTEN PETICIONES EN COLA --> SENALIZA
				if ( petFren.value != ((trenes[1] > 1) || (trenes[2] > 1) || (trenes[2] == 1) && (presencia == true))) {
					petFren.channel.out().write(petFren.value);
					// SI NO SE CUMPLE LA CPRE DE FRENO--> VUELVE A ENCOLAR EL ELEMENTO
				} else {
					listaFreno.enqueue(petFren);
				}
			}// CIERRE BUCLE COLA DE FRENO
			// RECORRIDO DE LA COLA DE LAS PETICIONES DE SEMAFORO
			for( int z = 0; z < sizeSemaforo; z++) {

				PeticionLeerCambioSemaforo petSem = listaSemaforo.first(); // OBTENEMOS PRIMER ELEMENTO DE LA COLA
				listaSemaforo.dequeue(); // DESENCOLAMOS PRIMER ELEMENTO

				// SI SE CUMPLE LA CPRE PARA SEMAFORO 1 Y EXISTEN PETICIONES EN COLA --> SENALIZA
				if ( petSem.index == 1 && (petSem.color) != (coloresBaliza[1])) {
					petSem.channel.out().write(petSem.color);
				} else {
					// SI NO SE CUMPLE LA CRE DE SEMAFORO 1--> VUELVE A ENCOLAR EL ELEMENTO
					listaSemaforo.enqueue(petSem);
				}
				// SI SE CUMPLE LA CPRE PARA SEMAFORO 2 Y EXISTEN PETICIONES EN COLA --> SENALIZA
				if ( (petSem.index == 2) && (petSem.color != (coloresBaliza[2]))) {
					petSem.channel.out().write(petSem.color);
				} else {
					// SI NO SE CUMPLE LA CRE DE SEMAFORO 2--> VUELVE A ENCOLAR EL ELEMENTO
					listaSemaforo.enqueue(petSem);
				}

			} // Cierre BUCLE COLA SEMAFORO
		} // CIERRE BUCLE SERVICIOS
	} // CIERRE run()

} // end CLASS
