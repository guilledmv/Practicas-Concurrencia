//package Practica1;
import java.util.LinkedList;
import java.util.Queue;

import org.jcsp.lang.Alternative;

import org.jcsp.lang.Any2OneChannel;
import org.jcsp.lang.CSProcess;
import org.jcsp.lang.ProcessManager;

import org.jcsp.lang.Channel;
import org.jcsp.lang.Guard;
import org.jcsp.lang.One2OneChannel;

/**
 * Implementacion usando jcsp mediante peticiones aplazadas
 */

//Grupo: Guillermo De Miguel Villanueva (160262) , Marcos Arevalo Salas (160266)

public class EnclavamientoCSP implements CSProcess, Enclavamiento {

	// CANALES PARA RECIBIR EL ESTADO DEL RECURSO--> 1 CANAL POR METODO
	private final Any2OneChannel chAvisarPresencia;
	private final Any2OneChannel chLeerCambioBarrera;
	private final Any2OneChannel chLeerCambioFreno;
	private final Any2OneChannel chLeerCambioSemaforo;
	private final Any2OneChannel chAvisarPasoPorBaliza;

	public EnclavamientoCSP() {
		this.chAvisarPresencia = Channel.any2one();
		this.chLeerCambioBarrera = Channel.any2one();
		this.chLeerCambioFreno = Channel.any2one();
		this.chLeerCambioSemaforo = Channel.any2one();
		this.chAvisarPasoPorBaliza = Channel.any2one();
		new ProcessManager(this).start();
	}

	// CLASE AUXILIAR PARA LAS PETICIONES QUE VAMOS RECIBIENDO
	public static class PeticionLeerCambioBarrera{
		protected One2OneChannel channel;
		protected boolean value;

		public PeticionLeerCambioBarrera(One2OneChannel channel, boolean value) {
			this.channel = channel;
			this.value = value;
		}
	}
	// CLASE AUXILIAR PARA LAS PETICIONES QUE VAMOS RECIBIENDO
	public static class PeticionLeerCambioFreno{
		protected One2OneChannel channel;
		protected boolean value;

		public PeticionLeerCambioFreno(One2OneChannel channel, boolean value) {
			this.channel = channel;
			this.value = value;
		}
	}
	// CLASE AUXILIAR PARA LAS PETICIONES QUE VAMOS RECIBIENDO
	public static class PeticionLeerCambioSemaforo{
		protected One2OneChannel channel;
		protected Control.Color color;
		protected int index;

		public PeticionLeerCambioSemaforo(One2OneChannel channel,
				Control.Color color,
				int index) {
			this.channel = channel;
			this.color = color;
			this.index = index;
		}
	}

	// IMPLEMENTACION ENCLAVAMIENTO

	public void avisarPresencia(boolean presencia) {
		chAvisarPresencia.out().write(presencia);
	}


	public boolean leerCambioBarrera(boolean abierta) {
		One2OneChannel ch = Channel.one2one();
		chLeerCambioBarrera.out().write(new PeticionLeerCambioBarrera(ch, abierta));
		return (Boolean) ch.in().read();
	}

	public boolean leerCambioFreno(boolean accionado) {
		One2OneChannel ch = Channel.one2one();
		chLeerCambioFreno.out().write(new PeticionLeerCambioFreno(ch, accionado));
		return (Boolean) ch.in().read();
	}

	public Control.Color leerCambioSemaforo(int i, Control.Color color) {
		if (i == 0) 
			throw new PreconditionFailedException("Semaforo 0 no existe");

		One2OneChannel ch = Channel.one2one();
		chLeerCambioSemaforo.out().write(new PeticionLeerCambioSemaforo(ch, color, i));
		return (Control.Color) ch.in().read();
	}

	public void avisarPasoPorBaliza(int i) {
		if (i == 0)
			throw new PreconditionFailedException("Baliza 0 no existe");

		chAvisarPasoPorBaliza.out().write(i);
	}

	// NOMBRES PARA LOS INDICES DE SERVICIOS
	static final int AVISAR_PRESENCIA = 0;
	static final int LEER_CAMBIO_BARRERA = 1;
	static final int LEER_CAMBIO_FRENO  = 2;
	static final int LEER_CAMBIO_SEMAFORO  = 3;
	static final int AVISAR_PASO_POR_BALIZA = 4;

	public void run() {
		// VARIABLES LOCALES PARA CONTROLAR EL ENCLAVAMIENTO

		boolean presencia; // DECLARAMOS EL ATRIBUTO PRESENCIA, PARA DETECTAR PRESENCIA EN EL CRUCE
		int [] trenes; 	// DECLARAMOS ARRAY DE TRENES PARA CONTROLAR EL PASO POR LAS BALIZAS
		Control.Color [] coloresBaliza; // DECLARAMOS UN ARRAY DE COLORES PARA LOS SEMAFOROS

		//DECLARAMOS ESTRUCTURAS AUXILIARES PARA ALMACENAR LAS PETICIONES APLAZADAS EN EL SERVIDOR

		Queue<PeticionLeerCambioBarrera> listaBarrera; // DECLARAMOS TRES COLAS PARA ALMACENAR LAS PETICIONES DE BARRERA, FRENO Y SEMAFORO
		Queue<PeticionLeerCambioFreno> listaFreno;
		Queue<PeticionLeerCambioSemaforo> listaSemaforo;


		// INICIALIZAMOS EL ESTADO DE NUESTROS RECURSOS
		presencia = false;
		trenes = new int [] {0,0,0,0};
		coloresBaliza = new Control.Color [] {Control.Color.VERDE,Control.Color.VERDE,Control.Color.VERDE,Control.Color.VERDE};

		// INICIALIZAMOS NUESTRAS COLAS DE PETICIONES
		listaBarrera = new LinkedList<PeticionLeerCambioBarrera>();
		listaFreno = new LinkedList<PeticionLeerCambioFreno>();
		listaSemaforo = new LinkedList<PeticionLeerCambioSemaforo>();

		// CONSTRUIMOS RECEPCION ALTERNATIVA
		Guard[] inputs = {
				chAvisarPresencia.in(),
				chLeerCambioBarrera.in(),
				chLeerCambioFreno.in(),
				chLeerCambioSemaforo.in(),
				chAvisarPasoPorBaliza.in()
		};

		Alternative services = new Alternative(inputs);
		int chosenService = 0;
		// BUCLE DE SERVICIO
		while (true) {
			chosenService = services.fairSelect();
			
			switch (chosenService) {

			case AVISAR_PRESENCIA: {
				// LEEMOS PETICION DEL CANAL
				// ACTUALIZAMOS ESTADO DEL RECURSO
				boolean quePresencia = (Boolean) chAvisarPresencia.in().read();
				presencia = quePresencia;
				// INVOCA COLORES CORRECTOS
				coloresCorrectos(trenes,coloresBaliza,presencia);
				break;
			}
			case LEER_CAMBIO_BARRERA: {
				// LEEMOS PETICION Y GUARDAMOS PETICION TAL CUAL
				listaBarrera.add((PeticionLeerCambioBarrera) chLeerCambioBarrera.in().read());
				break;
			}
			case LEER_CAMBIO_FRENO: {
				// LEEMOS PETICION Y GUARDAMOS TAL CUAL
				listaFreno.add((PeticionLeerCambioFreno) chLeerCambioFreno.in().read());
				break;
			}
			case LEER_CAMBIO_SEMAFORO: {
				// LEEMOS Y GUARDAMOS PETICION TAL CUAL
				listaSemaforo.add((PeticionLeerCambioSemaforo) chLeerCambioSemaforo.in().read());
				break;
			}
			case AVISAR_PASO_POR_BALIZA: {
				// LEEMOS PETICION DEL CANAL
				// ACTUALIZO EL ESTADO DEL RECURSO
				int i = (Integer) chAvisarPasoPorBaliza.in().read();
				trenes[i-1] = trenes[i-1] - 1;
				trenes[i] = trenes[i] + 1;

				// INVOCA COLORES CORRECTOS
				coloresCorrectos(trenes,coloresBaliza,presencia);
				break;
			}
			} // CIERRE swith

			//BLOQUEO Y DESBLOQUEO DE LAS PETICIONES
			// DECLARO LONGITUDES DE LAS COLAS
			int sizeBarrera = listaBarrera.size();
			int sizeFreno = listaFreno.size();
			int sizeSemaforo = listaSemaforo.size();
			// RECORRIDO DE LA COLA DE LAS PETICIONES DE BARRERA
			for( int i = 0 ; i < sizeBarrera ; i++) {
				PeticionLeerCambioBarrera petBar = listaBarrera.poll();
				boolean esperado = trenes[1] + trenes[2] == 0;
				// SI SE CUMPLE LA CPRE DE BARRERA
				if( petBar.value != esperado) {
					// POST
					petBar.channel.out().write(esperado);

					// SI NO SE CUMPLE LA CPRE DE FRENO--> VUELVE A ENCOLAR EL ELEMENTO
				} else {

					listaBarrera.add(petBar);

				}
			} // CIERRE BUCLE COLA BARRERA
			// RECORRIDO DE LA COLA DE LAS PETICIONES DE FRENO
			for ( int j = 0 ; j < sizeFreno ; j++ ) { 
				PeticionLeerCambioFreno petFren = listaFreno.poll(); // OBTENEMOS PRIMER ELEMENTO DE LA COLA
				boolean esperado = (trenes[1] > 1) || (trenes[2] > 1) || (trenes[2] == 1) && (presencia == true);
				// SI SE CUMPLE LA CPRE DE FRENO Y EXISTEN PETICIONES EN COLA --> ESCRIBE EN CANAL
				if ( petFren.value != esperado) {
					// POST
					petFren.channel.out().write(esperado);

					// SI NO SE CUMPLE LA CPRE DE FRENO--> VUELVE A ENCOLAR EL ELEMENTO
				} else { 

					listaFreno.add(petFren);

				}
			} // CIERRE BUCLE COLA DE FRENO
			// RECORRIDO DE LA COLA DE LAS PETICIONES DE SEMAFORO
			for ( int z = 0 ; z < sizeSemaforo ; z++ ) {
				PeticionLeerCambioSemaforo petSem = listaSemaforo.poll(); // OBTENEMOS PRIMER ELEMENTO DE LA COLA
				Control.Color esperado = coloresBaliza[petSem.index];
				// SI SE CUMPLE LA CPRE PARA SEMAFORO Y EXISTEN PETICIONES EN COLA --> ESCRIBE EN CANAL
				if(petSem.color != esperado) {
					petSem.channel.out().write(esperado);
				}
				else { 

					listaSemaforo.add(petSem);

				}
			} // CIERRE BUCLE COLA SEMAFORO
		} // CIERRE BUCLE SERVIDOR
	} // CIERRE run()
	//METODO AUXILIAR DE ColoresCorrectos
	private static void coloresCorrectos(int [] arr, Control.Color colores[], boolean prueba ) {
		// IMPLEMENTACION COLORES CORRECTOS
		if( arr[1] > 0 ) {
			colores[1] = Control.Color.ROJO; 
		} if( arr[1] == 0 && (arr[2] > 0 || prueba)) {
			colores[1] = Control.Color.AMARILLO; 	   
		} if( arr[1] == 0 && arr[2] == 0 && !prueba ) {
			colores[1] = Control.Color.VERDE; 
		}
		if( arr[2] > 0 || prueba ) {
			colores[2] = Control.Color.ROJO; 
		} if( arr[2] == 0 && !prueba) {
			colores[2] = Control.Color.VERDE; 
		} 
		colores[3] = Control.Color.VERDE; 
	}
} // end CLASS
