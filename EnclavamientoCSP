//package Practica1;
import java.util.ArrayList;
import java.util.List;

import org.jcsp.lang.Alternative;
import org.jcsp.lang.Any2OneChannel;
import org.jcsp.lang.CSProcess;
import org.jcsp.lang.Channel;
import org.jcsp.lang.Guard;
import org.jcsp.lang.One2OneChannel;

/** 
 * Enclavamiento implementation using CSP. 
 *
 */ 
public class EnclavamientoCSP implements CSProcess, Enclavamiento {

	private Any2OneChannel channelPresencia; // CANAL PARA ENVIAR PETICIONES DE AVISAR PRESENCIA
	private Any2OneChannel channelBarrera; // CANAL PARA ENVIAR Y RECIBIR PETICIONES DE BARRERA
	private Any2OneChannel channelFreno; // CANAL PARA ENVIAR Y RECIBIR PETICIONES DE FRENO
	private Any2OneChannel channelSemaforo; // CANAL PARA ENVIAR Y RECIBIR PETICIONES DE SEMAFORO
	private Any2OneChannel channelBaliza; // CANAL PARA ENVIAR PETICIONES DE BALIZA

	private boolean presencia; // DECLARAMOS EL ATRIBUTO PRESENCIA, PARA DETECTAR PRESENCIA EN EL CRUCE
	private int [] trenes; // DECLARAMOS ARRAY DE TRENES PARA CONTROLAR EL PASO POR LAS BALIZAS
	private Control.Color [] coloresBaliza; // DECLARAMOS UN ARRAY DE COLORES PARA LOS SEMAFOROS

	//METODO AUXILIAR QUE IMPLEMENTA LOS COLORES CORRECTOS
	private void coloresCorrectos () {

		if( trenes[1] > 0 ) {
			this.coloresBaliza[1] = Control.Color.ROJO; 
		} if( trenes[1] == 0 && ( trenes[2] > 0 || presencia == true )) {
			this.coloresBaliza[1] = Control.Color.AMARILLO; 	   
		} if( trenes[1] == 0 && trenes[2] == 0 && presencia == false ) {
			this.coloresBaliza[1] = Control.Color.VERDE; 
		} if( trenes[2] > 0 || presencia == true ) {
			this.coloresBaliza[2] = Control.Color.ROJO; 
		} if( trenes[2] == 0 && presencia == false ) {
			this.coloresBaliza[2] = Control.Color.VERDE; 
		} 
		this.coloresBaliza[3] = Control.Color.VERDE; 
	}

	@Override
	public void avisarPresencia(boolean presencia) {

		//------CPRE = CIERTO--> POR TANTO NO EXISTEN BLOQUEOS

		//------POST--------
		this.presencia = presencia;
		this.channelPresencia.out().write(presencia);
		coloresCorrectos();
	}

	@Override
	public boolean leerCambioBarrera(boolean actual) {
		// DECLARO BOOLEANO QUE VOY A DEVOLVER
		boolean esperado = (this.trenes[1] + this.trenes[2] == 0);
		// SI NO SE CUMPLE CPRE
		if ( actual == (this.trenes[1] + this.trenes[2] == 0)) {
			channelBarrera.in().read();
		}
		channelBarrera.out().write(esperado);
		return esperado;
	}

	@Override
	public boolean leerCambioFreno(boolean actual) {
		// DECLARO BOOLEANO QUE VOY A DEVOLVER
		boolean esperado = (this.trenes[1] > 1 || this.trenes[2] > 1 || this.trenes[2] == 1 && this.presencia == true);
		// SI NO SE CUMPLE LA CPRE
		if ( actual == (this.trenes[1] > 1 || this.trenes[2] > 1 || this.trenes[2] == 1 && this.presencia == true)) {
			channelFreno.in().read();
		}
		channelFreno.out().write(esperado);
		return esperado; 

	}

	/** notice that the exception can be thrown outside the server */
	@Override
	public Control.Color leerCambioSemaforo(int i, Control.Color color) {
		// SI NO SE CUMPLE LA PRE
		if (i == 0 ) {
			throw new PreconditionFailedException("Semaforo 0 no existe");
		}
		Control.Color encendido = coloresBaliza[i];
		// SI NO SE CUMPLE LA CPRE
		if( color.equals(coloresBaliza[i])) {
			channelSemaforo.in().read();
		}
		channelSemaforo.out().write(encendido);
		return encendido;
	}

	@Override
	public void avisarPasoPorBaliza(int i) {
		// SI NO SE CUMPLE LA PRE --> LANZAMOS EXCEPCION
		if ( i == 0) {
			throw new PreconditionFailedException();
		} 
		
		//-----POST----
		this.trenes[i-1] = trenes [i-1]-1;
		this.trenes[i] = trenes[i]+1;
		this.channelBaliza.out().write(i);
		coloresCorrectos();
	}


	/** SERVER IMPLEMENTATION */
	/**
	 * Constants representing the method presented in the API
	 */

	public EnclavamientoCSP() {

		this.channelBarrera = Channel.any2one();
		this.channelFreno= Channel.any2one();
		this.channelSemaforo = Channel.any2one();
		this.channelPresencia = Channel.any2one();
		this.channelBaliza = Channel.any2one();

	}

	@Override
	public void run() {

		// INICIALIZAMOS EL ESTADO DE LOS RECURSOS
		this.presencia = false;
		this.trenes = new int [] {0,0,0,0};
		this.coloresBaliza = new Control.Color [] {Control.Color.VERDE,Control.Color.VERDE,Control.Color.VERDE,Control.Color.VERDE};

		// NOMBRES SIMBOLICOS PARA LOS INDICES DE SERVICIOS

		final int AVISAR_PRESENCIA = 0;
		final int LEER_CAMBIO_BARRERA = 1;
		final int LEER_CAMBIO_FRENO  = 2;
		final int LEER_CAMBIO_SEMAFORO  = 3;
		final int AVISAR_PASO_POR_BALIZA = 4;

		// DECLARO UNA ENTRADA PARA CADA METODO

		Guard[] guards = { channelBarrera.in(), channelFreno.in(), channelSemaforo.in()};

		// RECEPCION ALTERNATIVA

		Alternative services = new Alternative(guards);

		// DECLARO UN ARRAY DE BOOLEANOS PARA LA SINCRONIZACION

		boolean [] sincCond = new boolean [5];


		while (true){
			//EVALUAMOS CPRE A TRAVES DE NUESTRO ARRAY DE BOOLEANOS

			sincCond[0] = true;
			sincCond[4] = true;

			switch(services.fairSelect(sincCond)){

			case AVISAR_PRESENCIA:
				channelPresencia.in().read();
				break;

			case LEER_CAMBIO_BARRERA:
				//@ assume pre && cpre operation;

				break;

			case LEER_CAMBIO_FRENO:
				//@ assume pre && cpre operation;

				break;

			case LEER_CAMBIO_SEMAFORO:
				//@ assume pre && cpre operation;

				break;

			case AVISAR_PASO_POR_BALIZA:
				//@ assume pre && cpre operation;
				channelBaliza.in().read();
				break;
			}


			/*
			 * Unblocking code
			 * Must always process all request which is associated CPRE holds
			 */
			boolean anyResumed;
			do{
				anyResumed = false;

				//@ assert todas las peticiones han sido procesadas
			} while (anyResumed);

		} // end while
	} // end run


}
